---
layout: layouts/post.njk
tags: posts
title: Indeterminate checkboxes are weird
description: 'HTML checkbox inputs are usually checked or unchecked. Here, we explore a third state: indeterminate.'
date: 2021-03-05
---

<p>
    A checkbox usually has two states: checked and unchecked. But indeterminate checkboxes are in a
    third state: neither checked nor unchecked. The “checkedness” is not determined.
</p>

<p>
    You have seen these before. The most common reason to have an indeterminate checkbox is when it
    is controlling a set of checkboxes. When none of the checkboxes are checked, neither is the
    master checkbox. When all of them are checked, so is the master checkbox. But if some are
    checked and some are not checked? The master checkbox state cannot be determined—it is
    indeterminate!
</p>

<p>
    For example, each email in your GMail inbox has its own checkbox to select it. Up top, there is
    another checkbox. If you check that one, all of the emails are selected. Uncheck to deselect all
    emails.
</p>

<p>
    If you only select a few emails, then the state of that checkbox cannot be determined. You have
    neither selected all of the emails, nor have you deselected all of them.
</p>

<figure>
    {% image "./img/gmail-checkboxes.jpg", "A screenshot of a list of emails in GMail. Three of the seven visible emails are selected. There is an arrow pointing to a checkbox which controls the select all or none behavior of the emails. That checkbox appears with a line in the middle, indicating an indeterminate state.", "38rem" %}
    <figcaption>
        The checkbox to select all or none of your emails appears in an indeterminate state when
        only a few of the emails are selected.
    </figcaption>
</figure>

<h2>How do we make this happen?</h2>

<p>
    Although indeterminate checkboxes are conceptually simple, implementing them correctly on a web
    page is not. We will be referencing the
    <a
        href="https://html.spec.whatwg.org/multipage/input.html#checkbox-state-(type=checkbox)">HTML
        specification about checkboxes</a>
    and using that information to implement indeterminate checkboxes.
</p>

<p>
    Let’s go!
</p>

<h2>Content and IDL attributes</h2>

<p>
    The first part of the specification we need to understand is this:
</p>

<blockquote cite="https://html.spec.whatwg.org/multipage/input.html#checkbox-state-(type=checkbox)">
    <p>
        If the element’s indeterminate IDL attribute is set to true, then the control’s selection
        should be obscured as if the control was in a third, indeterminate, state.
    </p>
</blockquote>

<p>
    This begs the question: What is an “IDL attribute”?
</p>

<p>
    Glad you asked.
</p>

<p>
    In HTML, elements have “content attributes”. These are the attributes that you can set on HTML
    elements, such as <code>id</code> and <code>class</code>.
</p>

{% highlight "html" %}
<p id="neat-paragraph" class="neato">Content attributes are neat</p>
{% endhighlight %}

<p>
    HTML code is interpreted by the browser on the web page’s first load in order to initialize the
    DOM. You can use content attributes to set up the initial state on the DOM nodes created by your
    HTML code.
</p>

<p>
    Later on, if you wanted to get the class name for this element in JavaScript, you could do this:
</p>

{% highlight "js" %}
const p = document.querySelector("#neat-paragraph");
console.log(p.className); // "neato"
{% endhighlight %}

<p>
    That property <code>className</code> on the <code>p</code> element is an “IDL attribute” for
    that element. “IDL” stands for “Interface Definition Language”. The
    <a href="https://heycam.github.io/webidl/">Web IDL</a> is the specification for IDL attributes
    to be implemented in web browsers. In JavaScript, we can use IDL attributes to interact with the
    state of DOM nodes.
</p>

<p>
    So to sum up:
</p>

<ul>
    <li>
        <strong>Content attributes:</strong>
    The attributes you set on DOM nodes by writing them in your HTML code.</li>

    <li>
        <strong>IDL attributes:</strong>
    The attributes on DOM nodes that you interact with in JavaScript code.</li>
</ul>

<p>
    Content attributes and IDL attributes often correspond, but not always. In the example above,
    we see that the content attribute is called <code>class</code> but the IDL attribute is called
    <code>className</code>. The kinds of things you can do with those attributes are also totally
    different between HTML and JavaScript.
</p>

<p>
    The <code>indeterminate</code> attribute is one case of an IDL attribute that does not have any
    corresponding content attribute. This means that the only way to set this state is with
    JavaScript.
</p>

{% highlight "js" %}
const cb = document.querySelector("#select-all-checkbox");
cb.indeterminate = true;
{% endhighlight %}

<h2>Checkboxes only have two states</h2>

<p>
    The next important thing we need to understand from the HTML spec is this:
</p>

<blockquote cite="https://html.spec.whatwg.org/multipage/input.html#checkbox-state-(type=checkbox)">
    <p>
        The control is never a true tri-state control, even if the element’s
        <code>indeterminate</code> IDL attribute is set to true. The <code>indeterminate</code> IDL
        attribute only gives the appearance of a third state.
    </p>
</blockquote>

<p>
    This is good to keep in mind. Whether or not a checkbox is checked is always determined; it is
    always true or false. This matters when you are handling the submitted values from a form. It
    will never submit an indeterminate value.
</p>

<h2>A note about ARIA</h2>

<p>
    <a href="/accessibility">I am always trying to keep my websites accessible</a>, and you should,
    too.
</p>

<p>
    To keep things accessible, it is important that we follow the
    <a href="https://www.w3.org/WAI/">ARIA guidelines from the W3C</a>. They have excellent
    documentation!
</p>

<p>
    For checkboxes, there is an <code>aria-checked</code> attribute that you could set on the
    checkbox. It is
    <a href="https://www.w3.org/TR/html-aria/#att-checked"
    >strongly recommended that you don’t do this</a>. The reason for this is that it would be really
    bad for <code>aria-checked</code> to disagree with the actual state of the element.
</p>

<p>
    The good news is that the value of <code>aria-checked</code> is automatically calculated for
    you!
</p>

<figure>
    {% image "./img/checked-mixed.jpg", "A screenshot of a checkbox in an indeterminate state, with the Chrome developer tools opened next to it in the Accessibility tab. The computed ARIA properties include a property called 'checked' with a value of 'mixed', corresponding to the state of the checkbox.", "38rem" %}
    <figcaption>
        The Chrome developer tools has an Accessibility tab where we can see the computed ARIA
        attributes for the elements in the DOM. As you can see, the computed <code>Checked</code>
        value for an indeterminate checkbox is “mixed”.
    </figcaption>
</figure>

<p>
    I don’t see any reason why you would need to manually set the <code>aria-checked</code>
    attribute for a checkbox, unless you are building one from scratch out of <code>div</code>
    elements.
</p>

<p>
    Perhaps you think you need this so that you can write a CSS selector for indeterminate
    checkboxes.
</p>

<p>
    However…
</p>

<h2>There’s a CSS selector for that</h2>

<p>
    More good news! CSS allows us to select checkboxes in any of the three states using
    pseudo-classes.
</p>

<ul>
    <li>The <code>:checked</code> pseudo-class selects checkboxes that are checked.</li>
    <li>We can use <code>:not(:checked)</code> to select for checkboxes that are not checked.</li>
    <li>
        The <code>:indeterminate</code> pseudo-class selects checkboxes in an indeterminate state.
    </li>
</ul>

<hr>

<p>
    I hope you found this helpful! See
    <a href="/react-ts-indeterminate-checkbox"
    >the follow-up blog post</a> where we implement an indeterminate checkbox using React and
    TypeScript.
</p>